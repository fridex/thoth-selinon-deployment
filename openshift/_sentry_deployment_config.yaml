#
# This template is not used.
#
apiVersion: v1
kind: Template
labels:
  template: sentry-deploymentconfig
  selinon: 1.0.0
metadata:
  name: sentry-deploymentconfig
  annotations:
    description: Selinon Sentry
    openshift.io/display-name: 'Selinon: Sentry'
    version: 1.0.0
    tags: poc,selinon,sentry
    template.openshift.io/documentation-url: https://github.com/selinon/
    template.openshift.io/long-description: Selinon Sentry deployment configuration template.
    template.openshift.io/provider-display-name: Fridolin Pokorny

objects:

- kind: Route
  apiVersion: v1
  metadata:
    name: sentry
    labels:
      app: selinon-sentry
      component: 
  spec:
    to:
      kind: Service
      name: sentry

- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: sentry
      app: selinon-sentry
      component: sentry
    name: sentry
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 5555
    selector:
      service: sentry


- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: sentry
      app: selinon-sentry
      component: sentry
    name: sentry
  spec:
    replicas: 1
    selector:
      service: sentry
    template:
      metadata:
        labels:
          service: sentry
      spec:
        containers:
        - env:
          - name: SENTRY_POSTGRES_HOST
            value: sentry-postgres
          - name: SENTRY_POSTGRES_PORT
            value: '5432'
          - name: SENTRY_DB_NAME
            value: sentry
          - name: SENTRY_DB_USER
            value: postgres
          - name: SENTRY_DB_PASSWORD
            value: postgres
          - name: SENTRY_REDIS_HOST
            value: sentry-redis
          - name: SENTRY_REDIS_PORT
            value: '6379'
          - name: SENTRY_REDIS_DB
            value: sentry
          - name: SENTRY_SECRET_KEY
            value: 'v0!93jdrpti^7v-7cl00^xi12h_(hb=dz#@1-**sgfsb6alqs1'
          name: sentry
          ports:
            - containerPort: 9000
              protocol: TCP
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "750m"
              # TODO:
              #          readinessProbe:
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 10
              #            timeoutSeconds: 10
              #          livenessProbe:
              #            # TODO: create liveness
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 60
              #            timeoutSeconds: 10
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - sentry
        from:
          kind: ImageStreamTag
          name: 'sentry:8.21.0'

- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: sentry-redis
      app: selinon-sentry
      component: sentry-redis
    name: sentry-redis
  spec:
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      service: sentry-redis

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: sentry-redis
      app: selinon-sentry
      component: sentry-redis
    name: sentry-redis
  spec:
    replicas: 1
    selector:
      service: sentry-redis
    template:
      metadata:
        labels:
          service: sentry-redis
      spec:
        volumes:
          - name: pv-sentry-redis
            emptyDir: {}
        containers:
        - env:
          name: sentry-redis
          ports:
            - containerPort: 6379
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: pv-sentry-redis
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "750m"
              # TODO:
              #          readinessProbe:
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 10
              #            timeoutSeconds: 10
              #          livenessProbe:
              #            # TODO: create liveness
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 60
              #            timeoutSeconds: 10
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - sentry-redis
        from:
          kind: ImageStreamTag
          name: 'redis:3.2.11'

- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: sentry-postgres
      app: selinon-sentry
      component: sentry-postgres
    name: sentry-postgres
  spec:
    ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      service: sentry-postgres

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: sentry-postgres
      app: selinon-sentry
      component: sentry-postgres
    name: sentry-postgres
  spec:
    replicas: 1
    selector:
      service: sentry-postgres
    template:
      metadata:
        labels:
          service: sentry-postgres
      spec:
        containers:
        - env:
          - name: POSTGRESQL_PASSWORD
            value: sentry
          - name: POSTGRESQL_USER
            value: sentry
          - name: POSTGRESQL_DATABASE
            value: sentry
          - name: POSTGRESQL_ADMIN_PASSWORD
            value: postgres
          name: sentry-postgres
          ports:
            - containerPort: 5432
              protocol: TCP
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "750m"
              # TODO:
              #          readinessProbe:
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 10
              #            timeoutSeconds: 10
              #          livenessProbe:
              #            # TODO: create liveness
              #            httpGet:
              #              path: '/'
              #              port: 5555
              #              scheme: HTTP
              #            initialDelaySeconds: 5
              #            periodSeconds: 60
              #            timeoutSeconds: 10
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - sentry-postgres
        from:
          kind: ImageStreamTag
          name: 'postgres:9.4'

# TODO: cron
# TODO: worker
